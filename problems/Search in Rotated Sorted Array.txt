Question:
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104

----------------------------------------------

Approach 1:
- Obviously doing a linear scan of the nums array will solve this problem.

TC: O(n)
SC: 0(1)

Approach 2 (Better in O(log n)):
- Find the pivot element using binary search in one pass
- Again using binary search in the two halves along pivot, find the target element

TC: O(n)
SC: O(1)


Code:

def search(nums: List[int], target: int) -> int:

	n = len(nums) - 1
	def find_pivot():
		low, high = 0, n
		while low <= high:
			mid = (low + high) // 2
			if nums[mid] > nums[-1]:
				low = mid + 1
			else:
				high = mid
		return low
	
	def binary_search(left, right):
		while left <= right:
			mid = (left + right) // 2
	
	
			if target > nums[mid]:
				left = mid + 1
			elif target < nums[mid]:
				right = mid - 1
			else:
				return mid
	
		return -1


	pivot = find_pivot()
	if nums[0] <= target <= nums[pivot]:
		return binary_search(0, pivot)
	else:
		return binary_search(pivot + 1, len(nums-1))

		
	
	
	
	
			
			