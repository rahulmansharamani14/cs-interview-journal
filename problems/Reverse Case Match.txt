# # Reverse Case Match

# Given a string, `s`, where half of the letters are lowercase and half uppercase, return whether the word formed by the lowercase letters is the same as the reverse of the word formed by the uppercase letters. Assume that the length, `n`, is even.

# ```
# Example 1:
# Input: s = "haDrRAHd"
# Output: true
# Explanation:
# - Lowercase letters: "hard"
# - Uppercase letters: "DRAH"
# - When reversed, "DRAH" becomes "HARD", which matches "hard" ignoring case.

# Example 2:
# Input: s = "haHrARDd"
# Output: false
# Explanation:
# - Lowercase letters: "hard"
# - Uppercase letters: "HARD"
# - When reversed, "HARD" becomes "DRAH", which doesn't match "hard".

# Example 3:
# Input: s = "BbbB"
# Output: true
# Explanation:
# - Lowercase letters: "bb"
# - Uppercase letters: "BB"
# - When reversed, "BB" becomes "BB", which matches "bb" ignoring case.
# ```

# Constraints:

# - 0 ≤ s.length ≤ 10^6
# - s contains only uppercase and lowercase English letters

# def reverseCaseMatch(s: str) -> bool:
#     lowerString = upperString = ""
#     for char in s:
#         if char.islower():
#             lowerString += char
#         if char.isupper():
#             upperString += char
    
#     reversedUpperString = upperString[::-1]
#     reversedUpperStringToLower = ""

#     for char in reversedUpperString:
#         reversedUpperStringToLower += char.lower()

#     return reversedUpperStringToLower == lowerString

def reverseCaseMatch(s: str) -> bool:
    
    l , r = 0 , len(s) - 1

    while l < len(s) and r >= 0:
        if not s[l].islower():
            l += 1
            continue
        if not s[r].isupper():
            r -= 1
            continue

        if not s[r].lower() == s[l]:
            return False
        
        l += 1
        r -= 1
    
    return True