Question:
You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.

You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).

For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).
 

Example 1:

Input
["Solution","pickIndex"]
[[[1]],[]]
Output
[null,0]

Explanation
Solution solution = new Solution([1]);
solution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.
Example 2:

Input
["Solution","pickIndex","pickIndex","pickIndex","pickIndex","pickIndex"]
[[[1,3]],[],[],[],[],[]]
Output
[null,1,1,1,1,0]

Explanation
Solution solution = new Solution([1, 3]);
solution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.

Since this is a randomization problem, multiple answers are allowed.
All of the following outputs can be considered correct:
[null,1,1,1,1,0]
[null,1,1,1,1,1]
[null,1,1,1,0,0]
[null,1,1,1,0,1]
[null,1,0,1,0,0]
......
and so on.
 

Constraints:

1 <= w.length <= 104
1 <= w[i] <= 105
pickIndex will be called at most 104 times.

---------------------------------------

Initial Thoughts/Questions:
- Looking at the probability formulae given in the question and supporting examples, I can infer that is the probability of the given index is proportional to the the w[i] i.e weight


Approaches:

Approach 1:
- We can precompute the running sum of the weights array and the last element of this running sum will be the total sum of this array
- Also, we can have a way to generate a random number and then mod it by total sum to have the rand number in range
- Using this running sum array, we can check where the rand number generated lies in which range by traversing through this precomputed running sum array. The weight which is greater than this random number generated, the index of that weight will be our answer

TC: O(N) where N is the length of the weights array
SC: O(N) for precomputed array length

Approach 2:
- For optimizing more time, we can do a binary search on precomputed running sum array in Approach 1 instead of doing a linear traversal becuase we know that the precomputed running sum will be in sorted order
- Other part of the approach would be same as Approach 1

TC: O(log N)
SC: O(N)


Code:


class Solution:

    def __init__(self, w: List[int]):
    	self.running_sum = []
    	total = 0
    	for weight in w:
    		total += weight
    		running_sum.append(total)
    	self.total = total
        
    def pickIndex(self) -> int:
        num = randint(0, total)
        
        left, right = 0, len(self.running_sum) - 1
        
        while left < right:
        	mid = left + (right - left) // 2
        	
        	if num > self.running_sum[mid]:
        		left = mid + 1
        	else:
        		right = mid
        return left 
        
