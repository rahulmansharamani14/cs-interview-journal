Question:
Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105

--------------------------------------------------------

Approaches:

Approach 1: Using Extra Space
- We can construct a new array by adding from last k elements first into our result array and then the remaining elements.
This will take O(n) space and O(n) time.

Approach 2: Doing In-pace
We can actually reverse the whole array first and then divide the array to first k elements and the remaining n - k elements. After that we can reverse them individually resulting into our desired rotated array.
- This approach would not take extra space as the reverse operation would be in-pace using swapping and the overall time complexity would be O(n) as we are processing all the elements once


Code:

def swap(arr, i , j):
	temp = arr[i]
	arr[i] = arr[j]
	arr[j] = temp

def reverseArray(arr, start, end):
	while start < end:
		swap(arr, start, end)
		start += 1
		end -= 1

def rotate(self, nums: List[int], k: int) -> None:
	n = len(nums)
	
	k = k % n #normalize k to avoid out of bounds
	
	#reverse entire array
	reverseArray(nums, 0, n - 1)
	
	#reverse first k elements
	reverseArray(nums, 0, k - 1)
	
	#reverse remaining n-k elements
	reverseArray(nums, k, n - 1)
	
