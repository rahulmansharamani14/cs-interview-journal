Question:
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.

Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.

Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 


Constraints:

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
All the integers of nums are unique.
nums is sorted and rotated between 1 and n times.
---------------------------------------------------------

Initial Thoughts/Questions:
- Since the input array is sorted, we can think of an binary search solution in O(log n)

Approaches:

Approach 1 (linear):
- Scan through the nums array while keep track of the min element
TC: O(n)
SC: O(1)

Approach 2:
- Using custom Binary search algorithm, find the pivot_index through which the array is rotated
- By doing this, we surely know that the element at the next index to this pivot_index is the minimum element in the nums array as both half of this pivot is sorted and through this pivot_index the array is rotated.
- So we can return our min element at the pivot_index + 1
 
 TC: O(log n) for finding pivot
 SC: O(1)
 
 Code:
 	
 def findMin(nums: List[int]) -> int:
 	n = len(nums)
 	def findPivot():
 		left, right = 0, n - 1
 		while left < right:
 			mid = left + (right - left) // 2
 			
 			if nums[mid] > nums[right]:
 				left = mid + 1
 			else:
 				right = mid
 		return left #the index to the smallest value
 	
 	
 	pivot_index = findPivot()
 	minElement = nums[pivot_index]
 	return minElement
 	
 	
 	
 	
