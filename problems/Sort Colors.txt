Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.


Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
[1,0,2]
Output: [0,1,2]
 


Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?

Approaches:

Approach 1 (Naive):

- Count all the zeros, ones and two's and maybe make a hashmap (dict) to store it.
- Based on this hashmap, update the nums list

TC: O(N + s) where N is the length of the nums list and s is the size of hashmap
SC: O(s) where s is the size of hashmap

Approach 2 (Better):

- Place a pointer at the left end (for 0s) and one at the right end (for 2s)
- Traverse through the list using a third pointer (curr)
- Based on the curr value, swap the value to left/right ends
	- If curr is 0: swap left with curr and move curr forward
	- If curr is 2: swap right with curr and move right one step towards current
	- If curr is 1: no swap required, simply move the curr ahead
- Update the left and right pointers

TC: O(N) where N is the length of nums
SC: O(1) as no extra space is used

Code:

def sortColors(nums):
	n = len(nums)
	
	def swap(nums, left, right):
		temp = nums[right]
        nums[right] = nums[left]
        nums[left] = temp
	
	left, right = 0, n - 1
	curr = 0
	
	while curr <= right:
		if nums[curr] == 0:
			swap(nums, left, curr)
			left += 1
			curr += 1
		elif nums[curr] == 2:
			swap(nums, right, curr)
			right -= 1
		else:
			curr += 1
			


		
		
			
		
		
			
			