Question:

Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.

 

Example 1:

Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]
Output: [1,5]
Explanation: Only 1 and 5 appeared in the three arrays.
Example 2:

Input: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]
Output: []
 

Constraints:

1 <= arr1.length, arr2.length, arr3.length <= 1000
1 <= arr1[i], arr2[i], arr3[i] <= 2000

---------------------------------------------------------------------------------------------
Thoughts/Clarifying Questions:
- Does the input arrays contains duplicates? Yes
- Do we want duplicates in our final result array? No

Approaches:

Approach 1:
We could use a hashset and convert all three arrays into hashset. Then we could simply use intersect operator to find the intersection set and convert back to our result array.

		
Approach 2: Three Pointers
We could use three pointers placed at the start of each array. We will compare each value at these pointer, if they are same, add that to our result array. If they are not same, we will advance the smallest value pointer. 
if  m = len(arr1)
TC: O(m + n + o)
SC: O(1) if we do not consider the result arrays as extra space otherwise O(m) or O(n) or O(o)

def arraysIntersection(self, arr1: List[int], arr2: List[int], arr3: List[int]) -> List[int]:
	p1, p2, p3 = 0, 0, 0
	res = []
	
	while p1 < len(arr1) and p2 < len(arr2) and p3 < len(arr3):
		
		if arr1[p1] == arr2[p2] == arr3[p3]:
			res.append(arr1[p1])
			p1 += 1
			p2 += 1
			p3 += 1
		else:
			if arr1[p1] < arr2[p2]:
				p1 += 1
			elif arr2[p2] < arr3[p3]:
				p2 += 1
			else:
				p3 += 1
	
	return res
				 