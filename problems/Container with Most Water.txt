You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104

Clarifying Questions/Thoughts:

- Amount of water can be calculated as the area between these vertical lines along the x-axis (as the given input correspondes to a 2d shape)
- The area can calculated as the product of min(two vertical line) and the diff between their x-axis coordinates.
- In order to find the max amount of water, we need to keep track of area calculated and update it whenever we got bigger area.


Approaches:
Approach 1:
- Traverse through the height array and calc area for every given height (Nested Loop)
- Calculate area = min(height[i], height[j]) * (j - i)
- Keep track of max_area and update it everytime, we got bigger area than max_area
- Return max_area

TC: O(n^2) where n is the len(height)
SC: O(1) as no extra space is utilized


Code:

def maxArea(height) -> int:
	n = len(height)
	maxArea = 0
	for i in range(n):
		for j in range(i+1, n):
			length = min(height[i], height[j])
			width = j - i
			area = length * width
			
			maxArea = max(maxArea, area)
			
	return maxArea
	
Approach 2:
- Using two pointer approach, place left pointer at the left end and the right pointer at the right end (as we want to maximize the width, to maximize the area)
- Calculate the area = min(height[left], height[right]) * (right - left)
- Keep track of max_area and update it everytime, we got bigger area than max_area
- Update the pointer based on it's next value
	- If the next value to the left is more, shift the left pointer ahead
	- If the previous value to the right is more, shift the right pointer behind
	- If the next of both are equal, move any one pointer
- Return max_area

TC: O(n): linear as we traverse through the height array only one time
SC: O(1) as we only use bunch of pointers

Code:
def maxArea(height) -> int:
	left = 0
	right = len(height) - 1
	maxArea = 0
	while left < right:
		length = min(height[left], height[right])
		width = right - left
		area = length * width
		
		maxArea = max(maxArea, area)
		
		if height[left] < height[right]:
			left += 1
		else:
			right -= 1
	
	return maxArea



