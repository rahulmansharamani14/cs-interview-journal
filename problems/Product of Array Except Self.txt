Question:
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]


Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.
-----------------------------

Approaches:

Approach 1 (Naive):
- Run a nested loop (traversing through each element) calculating the product of all the elements except the current element

TC: O(n^2) where n is the len of the nums array
sc: O(1)

Approach 2 (Better):
- We can traverse through this nums array and pre compute prefix and suffix product values for each element
- By doing this, we can run another traversal of nums array and just calculate the product of prefix and suffix value for the current element giving us essentially the product of all the elements except the current one

TC: O(n) where n is the len of the nums array
SC: 
- O(n) for prefix product
- O(n) for suffix product
essentially, giving us O(n) extra space

Code:

def productExceptSelf(nums):
	prefix_product = 1
	suffix_product = 1
	
	
	n = len(nums)
	
	prefix_product_list = [1] * n
	suffix_product_list = [1] * n
	ans = [1] * n
	
	for i in range(1, n):
		prefix_product_list[i] = prefix_product_list[i-1]*nums[i-1]
	
	for i in range(n-2, -1, -1):
		suffix_product_list[i] = suffix_product_list[i+1]*nums[i+1]
		
	for i in range(n):
		ans[i] = prefix_product_list[i]*suffix_product_list[i]
	return ans
		
	
