Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:


Input: head = [1,2,3,4,5,6] n = 2
			        p1  p2
Output: [1,2,3,4,6]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

Approaches:

Approach 1:
- Traverse through this list and calculate the len of the list.
- Traverse through this list again till len(list) - n. Take the hold the pointer to this node and update it's pointer to it's next.next (essentially skipping the next node and removing it. Python will take care of destroying this node, other languages like C++/Java, we have to free it's memory)
- Return the head (we had the hold of head earlier)
TC: O(N) + O(N) = O(N) where N is the size of input list
SC: O(1) as we are not using additional data structures (just pointer operations)

Code:

def RemoveNthFromEnd(head, n):
		if head.next is None:
            return None
        curr = head
        lengthOfList = 0
        while curr:
            lengthOfList += 1
            curr = curr.next
        
        curr = head

        target = (lengthOfList - n)
        if target == 0:
            return head.next
            
        for i in range(0, target - 1):
            curr = curr.next
        
        curr.next = curr.next.next

        return head


Approach 2: 
- Set a ptr 1 at head and ptr 2 at n distances from ptr 1.
- Traverse through this list till ptr 2 reaches end of the list. At this moment, ptr 1 will reach (n-1) node.
- Update it's next pointer to the next.next (essentially skipping the next node and removing it. Python will take care of destroying this node, other languages like C++/Java, we have to free it's memory)
- Return the head of the list

TC: Single Pass: O(N) where N is the size of input list
SC: O(1)  

[1,2], n = 2
p1,p2
Code:

def RemoveNthFromEnd(head, n):

	if head.next is None:
		return None
		
	p1 = p2 = head
	
	for i in range(0, n):
		p2 = p2.next
	
	if p2 is None:
		return head.next
	
	while p2:
		p1 = p1.next
		p2 = p2.next
	
	p1.next = p1.next.next
	
	return head


