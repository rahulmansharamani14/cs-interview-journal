Question:
Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:

Input: s = "the sky is blue"

Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 

Constraints:

1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.

----------------------------------------------------------

Clarifying Questions/Observation:
- Space between word should be trimmed down to single space
- s will have atleast one word, so no empty string handling required

Approaches:

Approach 1 (Naive):
- Convert this string to array 
- Reverse the array either by sort() method or two pointer approach
- Convert this reversed array in-place back to string

TC: 
for converting string to array: O(n)
for reversing the array in one pass: O(n) 
for converting array back to string = O(n) 

final TC: O(n) where n is the len of the array
SC: O(n) where n is len of the array, for extra array space


Code:

def reverseWords(s) -> str:
	s_list = s.split() #by default python string will avoid all the empty space
	
	left = 0
	right = len(s_list) - 1
	
	while left < right:
		temp = s_list[left]
		s_list[left] = s_list[right]
		s_list[right] = temp
		
		left += 1
		right -= 1
	return " ".join(s_list) 





