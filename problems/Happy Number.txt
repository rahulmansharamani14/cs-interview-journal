Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1
Example 2:

Input: n = 2
Output: false

Constraints:

1 <= n <= 2^31 - 1

Clarifying Questions/Thoughts:

- If the algorithm never ends up in 1 for an input num, how do we set the exit condition of the loop? Does it creates a cycle?



Approaches:

Assuming it does creates a cycle and the resulting numbers will repeat at some point

Approach 1:
- We can keep track of the resulting num in some kind of data structure (say hashset)
- If the current num came out of the algorithm is present in this hashset, we can say that this is not an happy number (return False)
- If at any point of time the resulting num is 1, we can say this a happy number (return True)

TC: O(log n) where n is the digits in the input number
SC: O(log n) 



Code:

def isHappy(n):
	
	visited = set()
	
	while n not in visited:
		n = sumOfSquare(n)
		
		if n == 1:
			return True
			
		visited.add(n)
	return False

def sumOfSquare(n):
	res = 0
	
	while n:
		digit = n % 10
		res += digit ** 2
		n = n // 10
	return res
	
Approach 2 (Space Optimized):
- We can use fast-slow pointer approach to detect cycles without using an additional data strucuture
- If at any point of time, we encounter 1, we can say this is a happy number (return True)
- If at any point of time, the fast and slow pointer meets, we can say this is not an happy number (return False)

TC: O(log n)
SC: O(1)

Code:

def isHappy(n):	
	slow = n
	fast = sumOfSquare(n)
	
	while fast != slow:
		slow = sumOfSquare(slow)
		fast = sumOfSquare(sumOfSquare(fast))
		
		if fast == 1 or slow == 1:
			return True
	return False

def sumOfSquare(n):
	res = 0
	
	while n:
		digit = n % 10
		res += digit ** 2
		n = n // 10
	return res

	