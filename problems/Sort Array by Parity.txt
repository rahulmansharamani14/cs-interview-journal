Question:
Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.

Return any array that satisfies this condition.

 

Example 1:

Input: nums = [3,1,2,4]
Output: [2,4,3,1]
Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 5000
0 <= nums[i] <= 5000

-----------------------------


Approach 1:
The most straightforward approach I can think of is just make separate even and odd arrays by traversing the input array and then merge them into one with even array first then odd array. Once merged, we can actually, assign it to the input array variable.

But this does not follow the rule as we need to do in-place. One thing I would like to callout is it would take O(n) space and O(n) time.

Approach 2:
We can use two pointers placed at left and right end of the input array
- Left pointer starts at the beginning (index 0)
- Right pointer starts at the end (index n-1)
- While left < right:
	- If left points to an even number, move left pointer right
	- If right points to an odd number, move right pointer left
	- Otherwise (left points to odd and right points to even), swap them and move both pointers
	
SC: O(1)
TC: O(n)


Code:

def sortArrayByParity(self, arr: List[int]) -> None:

        l , r = 0, len(arr) - 1

        def swap(n1, n2):
            temp = arr[n1]
            arr[n1] = arr[n2]
            arr[n2] = temp

        while l < r:
            # left value is even
            if arr[l] % 2 == 0:
                l += 1
                continue

            #right value is odd
            if arr[r] % 2 != 0:
                r -= 1
                continue

            #left value is odd and right value is even, swap happens
            swap(l, r)
            l += 1
            r -= 1