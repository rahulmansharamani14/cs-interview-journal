
# # Interval Intersection

# In this problem, we represent an interval as an array with two integers, `[start, end]`, where `start <= end`. Both endpoints are considered part of the interval, which may consist of a singular point if `start == end`.

# You are given two arrays of intervals, `arr1` and `arr2`. For each array, the intervals are non-overlapping (they don't even share an endpoint) and sorted from left to right. Return a similarly non-overlapping, sorted array of intervals representing the *intersection* of the intervals in `arr1` and `arr2`. An interval shouldn't start at the same value where another interval ends.

# ```
# Example 1:
# Input: 
# arr1 = [[0, 1], [4, 6], [7, 8]]
# arr2 = [[2, 3], [5, 9], [10, 11]]
# Output: [[5, 6], [7, 8]]
# Explanation: 
# - [4, 6] from arr1 intersects with [5, 9] from arr2 to give [5, 6]
# - [7, 8] from arr1 intersects with [5, 9] from arr2 to give [7, 8]

# Example 2:
# Input:
# arr1 = [[2, 4], [5, 8]]
# arr2 = [[3, 3], [4, 7]]
# Output: [[3, 3], [4, 4], [5, 7]]
# Explanation:
# - [2, 4] intersects with [3, 3] to give [3, 3]
# - [2, 4] intersects with [4, 7] to give [4, 4]
# - [5, 8] intersects with [4, 7] to give [5, 7]
# The array [[3, 3], [4, 4], [5, 6], [6, 7]] would not be correct because [5, 6] and [6, 7] can be combined.
# ```

# Here is a visualization of Example 1:

# https://iio-beyond-ctci-images.s3.us-east-1.amazonaws.com/interval-intersection-1.png

# Constraints:
# - 0 ≤ arr1.length, arr2.length ≤ 10^6
# - arr1[i].length = arr2[j].length = 2
# - -10^9 ≤ start ≤ end ≤ 10^9 for each interval
# - Each list is sorted and non-overlapping (any two intervals from the same list don't even share an endpoint)

from typing import List


def intersectInterval(arr1: List[List[int]], arr2: List[List[int]]) -> List[List[int]]:

    p1, p2 = 0, 0

    res: List[List[int]]= []

    while p1 < len(arr1) and p2 < len(arr2):
        if arr1[p1][1] >= arr2[p2][0] and arr2[p2][1] >= arr1[p1][0]:
            # overlap found
            res.append([ max(arr1[p1][0], arr2[p2][0]), min(arr1[p1][1], arr2[p2][1])])
        
        #Advance the pointers
        if arr1[p1][1] < arr2[p2][1]:
            p1 += 1
        else: 
            p2 += 1
    
    return res

def run_tests():
  tests = [
      # Example 1 from the book
      ([[0, 1], [4, 6], [7, 8]], [[2, 3], [5, 9], [10, 11]], [[5, 6], [7, 8]]),
      # Example 2 from the book
      ([[2, 4], [5, 8]], [[3, 3], [4, 7]], [[3, 3], [4, 4], [5, 7]]),
      # Additional test cases
      ([], [], []),
      ([[1, 2]], [], []),
      ([[1, 3]], [[2, 4]], [[2, 3]]),
      ([[1, 5]], [[2, 3]], [[2, 3]]),
      ([[1, 2], [3, 4]], [[2, 3]], [[2, 2], [3, 3]]),
  ]
  for arr1, arr2, want in tests:
    got = intersectInterval(arr1, arr2)
    print("got: ", got)
    print("want: ", want)
    assert got == want, f"\ninterval_intersection({arr1}, {arr2}): got: {got}, want: {want}\n"

run_tests()
