
# # Quicksort Partition

# Given an array of integers, `arr`, and an integer, `pivot`, modify `arr` in place using only O(1) extra space so that (1) every element smaller than the pivot appears before every element greater than or equal to the pivot, and (2) every element larger than the pivot appears after every element smaller than or equal to the pivot.

# The relative order of the elements smaller than or greater than the pivot does not matter.

# ```
# Example 1:
# Input: arr = [1, 7, 2, 3, 3, 5, 3], pivot = 4
# Output: [1, 2, 3, 3, 3, 7, 5]
# Explanation: The array is partitioned into:
# - Elements less than 4: [1, 2, 3, 3, 3]
# - Elements equal to 4: []
# - Elements greater than 4: [7, 5]
# Other orders, such as [3, 2, 1, 3, 3, 5, 7], would also be valid.

# Example 2:
# Input: arr = [1, 7, 2, 3, 3, 5, 3], pivot = 3
# Output: [1, 2, 3, 3, 3, 7, 5]
# Explanation: The array is partitioned into:
# - Elements less than 3: [1, 2]
# - Elements equal to 3: [3, 3, 3]
# - Elements greater than 3: [7, 5]
# Other orders, such as [2, 1, 3, 3, 3, 5, 7], would also be valid.
# ```

# Constraints:

# - 0 ≤ arr.length ≤ 10^6
# - -10^9 ≤ arr[i], pivot ≤ 10^9


from typing import List

def swap(arr, i , j):
    temp = arr[i]
    arr[i] = arr[j]
    arr[j] = temp


def quicksortPartition(arr: List[int], pivot: int) -> None:
    low , high = 0 , len(arr) - 1

    while low < high:
        if arr[low] < pivot:
            low += 1
        elif arr[high] > pivot:
            high -= 1
        else:
            # left value is >= pivot and right value is <= pivot, swap happens
            swap(arr,low,high)
            if arr[low] != pivot:
                low += 1
            high -= 1

def run_tests():
  def is_valid_partition(arr, pivot):
    # Find boundaries between sections
    first = 0
    while first < len(arr) and arr[first] < pivot:
      first += 1
    second = first
    while second < len(arr) and arr[second] == pivot:
      second += 1

    # Check that all elements are in their correct sections
    for i in range(first):
      if arr[i] >= pivot:
        return False
    for i in range(first, second):
      if arr[i] != pivot:
        return False
    for i in range(second, len(arr)):
      if arr[i] <= pivot:
        return False
    return True

  tests = [
      # Example 1 from the book
      ([1, 7, 2, 3, 3, 5, 3], 4),
      # Example 2 from the book
      ([1, 7, 2, 3, 3, 5, 3], 3),
      # Additional test cases
      ([], 1),
      ([1], 1),
      ([1, 2], 1),
      ([2, 1], 1),
      ([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 4),
  ]
  for arr, pivot in tests:
    arr_copy = arr.copy()  # Make a copy since partition modifies in place
    quicksortPartition(arr_copy, pivot)
    assert is_valid_partition(arr_copy, pivot), \
        f"\npartition({arr}, {pivot}): got: {arr_copy}\n"
    
run_tests()

