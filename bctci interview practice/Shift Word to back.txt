
# # Shift Word to Back

# You are given an array of letters, `arr`, and a string, `word`. We know that `word` appears within `arr` as a *subsequence* (its letters appear in order, though not necessarily contiguously). Identify the earliest occurrence of `word` in `arr` (that is, the first subsequence from left to right that spells out word) and move all those letters, in order, to the end of `arr`. You must do this in place, using only O(1) extra space, and preserve the relative order of both the moved letters and the remaining letters.

# ```
# Example:  arr = [s, e, e, k, e, r, a, n, d, w, r, i, t, e, r], word = "edit"
# Output:  [s, e, k, e, r, a, n, w, r, e, r, e, d, i, t]

# The subsequence that needs to be moved is:

#     [s, e, e, k, e, r, a, n, d, w, r, i, t, e, r]
#         ^                    ^        ^  ^

# Example:  arr = [b, a, c, b], word = "ab"
# Output:  [b, c, a, b]. We cannot move the first 'b' because we need to find 'a' first. [c, b, a, b] would be incorrect.

# Example:  arr = [b, a, b, c], word = "b"
# Output:  [a, b, c, b]. We must move the first 'b' to the end, not the second one. [b, a, c, b] would be incorrect.
# ```

# Constraints:

# - 0 ≤ arr.length ≤ 10^6
# - 0 ≤ word.length ≤ arr.length
# - arr and word contain only lowercase English letters

------------------------------------------------------------
TC: O(len(arr) + len(word))
SC: O(1)

Code:

from typing import List


def shiftWordToBack(arr: List[str], word: str) -> List[str]:
    if not word:
        return arr
    if not arr:
        return []

    read_ptr = write_ptr = 0
    word_ptr = 0
    
    while read_ptr < len(arr):

        #Element in arr match with char in word
        if arr[read_ptr] == word[word_ptr] and word_ptr < len(word):
            # Skip that element by advacning read pointer and word pointer but not write pointer
            read_ptr += 1
            word_ptr += 1

        else: #Element in arr not match with char in word
            #Copy element from read ptr to write ptr, and advancing both ptrs and word ptr too
            arr[write_ptr] = arr[read_ptr]
            read_ptr += 1
            write_ptr += 1
    
    # Copy char from word string to arr's end
    for i in range(len(word)):
        arr[write_ptr] = word[i]
        write_ptr += 1

    return arr