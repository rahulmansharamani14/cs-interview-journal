
# # Missing Numbers in Range

# Given a sorted array of integers, `arr`, and two values indicating a range, `low` and `high`, with `low <= high`, return a new array with all the numbers in the range that do not appear in `arr`.

# ```
# Example 1:
# Input: arr = [6, 9, 12, 15, 18], low = 9, high = 13
# Output: [10, 11, 13]
# Explanation: The numbers 10, 11, and 13 are in the range [9, 13] but not in arr.

# Example 2:
# Input: arr = [], low = 9, high = 9
# Output: [9]
# Explanation: 9 is in the range [9, 9] but arr is empty.

# Example 3:
# Input: arr = [6, 7, 8, 9], low = 7, high = 8
# Output: []
# Explanation: Every number in the range [7, 8] appears in arr.
# ```

# Constraints:
# - arr is sorted in ascending order
# - 0 ≤ arr.length ≤ 10^6
# - -10^9 ≤ low ≤ high ≤ 10^9
# - All elements in arr are in the range [-10^9, 10^9]
# - high - low ≤ 10^6


'''
Approach 1: Using Set

def findMissingNumber(arr: list[int], low: int, high: int) -> list[int]:

    #Initialize and create a set from the input arr
    existNumbers = set()
    res = []

    for num in arr:
        existNumbers.add(num)
    
    # Build the result array based on number from range low to high exist in set
    for num in range(low, high + 1):
        if num not in existNumbers:
            res.append(num)
    
    return res
'''

'''
Using Two pointers
'''
def findMissingNumber(arr: list[int], low: int, high: int) -> list[int]:

    array_pointer = 0
    num = low
    res = []

    while array_pointer < len(arr) and num <= high:
        
        if arr[array_pointer] < low:
            #Advance array pointer till we enter the range from low
            array_pointer += 1
            continue
        
        if arr[array_pointer] == num:
            array_pointer += 1
            num += 1
            continue
        
        if arr[array_pointer] > num:
            res.append(num)
            num += 1
    
    while num <= high:
        res.append(num)
        num += 1
        
    return res
        
        
def run_tests():
  tests = [
      # Example 1 from the book
      ([6, 9, 12, 15, 18], 9, 13, [10, 11, 13]),
      # Example 2 from the book
      ([], 9, 9, [9]),
      # Example 3 from the book
      ([6, 7, 8, 9], 7, 8, []),
      # Additional test cases
      ([], 1, 5, [1, 2, 3, 4, 5]),
      ([1, 2, 3, 4, 5], 1, 5, []),
      ([1, 3, 5], 1, 5, [2, 4]),
      ([1], 1, 1, []),
      ([2], 1, 3, [1, 3]),
  ]
  for arr, low, high, want in tests:
    got = findMissingNumber(arr, low, high)
    print("got: ", got)
    print("want: ", want)
    assert got == want, f"\nmissing_numbers({arr}, {low}, {high}): got: {got}, want: {want}\n"


run_tests()




